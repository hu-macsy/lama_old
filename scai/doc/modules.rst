.. _modules:

Modules
=======

.. toctree::
	:hidden:
   
	modules/hcdk
	modules/mke
	modules/de
	modules/lap

LAMA is a multi-layer framework offering four main modules: The Heterogeneous Computing Development Kit provides the management of heterogeneous memory and compute kernels. Asynchronous executing is a key capability. The Math Kernel Extension gives uniform access to dense and sparse compute kernelÂ´s on all platforms while the Distributed Extension supplies full cluster support for scalability on data parallel applications. The Linear Algebra Package enables programming using mathematical notation and prepared iterative solvers. The whole framework - as well as each module - is build up of a couple of subproject, depending on each other.

.. figure:: _images/LAMA_Hierarchy4.png
    :width: 500px
    :align: center
    :alt: LAMA software stack

In the following we describe the goals of each module and you find the user documentation of the containing subprojects. Depending on your needs you can use single libraries (with their internal dependencies) or the complete framework. According to this you can start reading with the highest library you want to use. Each subproject should give a short introduction how to use the general functionality. For detailed information about the classes and their dependencies you find our |SysDoc| generated by Doxygen.

.. |SysDoc| raw:: html

	<a href="https://libama.org/doxygen/index.html" target="_blank"> System Documentation </a>

Heterogeneous Computing Development Kit
---------------------------------------

LAMA's base module facilitates three issues:

* A consistent data usage on heterogeneous devices via dedicated read and write accesses within the memory management.
* Decisions about the execution context in the application are separated from implementing the kernels by the kernel management. 
* Asynchronous execution of these kernels, memory transfer and communication is handled by the tasking layer. This combination leads to a clean software development, 
  accomplishing a good maintainability on the user's side with minimal runtime overhead.

The Heterogeneous Computing Development Kit contains the subprojects:

* :ref:`SCAI Common - Basic Concepts <scaicommon:main-page_common>`
* :ref:`SCAI Logging - Logging Macros <scailogging:main-page_logging>`
* :ref:`SCAI Tracing - Tracing Macros <scaitracing:main-page_tracing>`
* :ref:`SCAI Tasking - Asynchronous Tasks <scaitasking:main-page_tasking>`
* :ref:`SCAI Hmemo - Heterogeneous Memory Architecture <scaihmemo:main-page_hmemo>`
* :ref:`SCAI Kregistry - Generic Kernel Registry <scaikregistry:main-page_kregistry>`

Math Kernel Extension
---------------------

The Math Kernel Extension provides access to hardware independent kernel routines for multiple purposes: basic utility functionality on arrays, dense and sparse BLAS operations as well as sparse conversion routines encapsulating MKL (BLAS), cuBLAS and cuSPARSE or own optimized kernels. Different sparse matrix formats are available to facilitate the application in various use cases and target architectures.

The Math Kernel Extension contains the subprojects:

* :ref:`SCAI BLASKernel - BLAS Kernel <scaiblaskernel:main-page_blaskernel>`
* :ref:`SCAI UtilsKernel - Utils Kernel <scaiutilskernel:main-page_utilskernel>`
* :ref:`SCAI SparseKernel - Sparse BLAS Kernel <scaisparsekernel:main-page_sparsekernel>`

Distributed Extension
---------------------

The Distributed Extension realises strategies for the distribution of data among processes and handles the communication between those. LAMA currently supports the MPI standard for distributed communication.

The Distributed Extension contains the subproject:

* :ref:`SCAI Dmemo - Distributed Memory <scaidmemo:main-page_dmemo>`

Linear Algebra Package
----------------------

The Linear Algebra Package facilitates the development of (sparse) numerical algorithms for various application domains. Code can be written in text-book-syntax as

.. code-block:: c++

	y = A * x

(where x and y are vectors and A is a matrix). Due to the underlying layers, the problem formulation is handled independently of the implementation details regardless of the target architecture and distribution strategy as memory management and communication is processed internally. Furthermore, with load balancing between different components and asynchronous execution, full system performance can be obtained.
In addition, LAMA offers various iterative solvers like Jacobi or CG methods, that can be used directly or preconditioned, with a combination of several user-definable stopping criteria. Furthermore, the integration of a custom-built solver is straightforward.

The Linear Algebra Package contains the subprojects:

* :ref:`SCAI LAMA - LAMA core <scailama:main-page_lama>`
* :ref:`SCAI Solver - Iterative Solver <scaisolver:main-page_solver>`

Optimization
------------

Partitioning provides routines to optimize the distribution of sparse matrices in such a way that halo parts become small and therefore communication
is minimized.

* :ref:`SCAI Partitioning - Partitioning to get optimized distributions  <scaipartitioning:main-page_partitioning>`

Least Squares Solver with box constraints:

* :ref:`SCAI Least Squares with Box Constraint  <scaipartitioning:main-page_ipbcls>`

Tools
-----

In contrary to the other packages this package does not provide a library, but a lot of executables that use the functionality of LAMA.
These executable are tools that might be helpful on its own, e.g. generation of matrices and vectors, file conversions, running and testing solvers.

* :ref:`SCAI Tools - Useful Executables  <scaitools:main-page_tools>`
