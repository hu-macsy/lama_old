#!/bin/bash -e

###
 # @file code_coverage.sh
 #
 # @license
 # Copyright (c) 2009-2016
 # Fraunhofer Institute for Algorithms and Scientific Computing SCAI
 # for Fraunhofer-Gesellschaft
 #
 # This file is part of the SCAI framework LAMA.
 #
 # LAMA is free software: you can redistribute it and/or modify it under the
 # terms of the GNU Affero General Public License as published by the Free
 # Software Foundation, either version 3 of the License, or (at your option)
 # any later version.
 #
 # LAMA is distributed in the hope that it will be useful, but WITHOUT ANY
 # WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 # FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
 # more details.
 #
 # You should have received a copy of the GNU Affero General Public License
 # along with LAMA. If not, see <http://www.gnu.org/licenses/>.
 # @endlicense
 #
 # @brief This file is a shellscript, which contains all necessary steps to 
 #        measure code coverage of LAMA.
 # @author Alexander BÃ¼chel, Lauretta Schubert
 # @date 15.08.2012
###

source scai_code_coverage_functions.sh

dirname=$(create_dir)
echo "Create coverage directory: ${dirname}"

prepare_coverage $dirname ../..

export SCAI_LOG=TRACE
export SCAI_TRACE=time
	
# Running lama tests
echo "Running serial lama tests"
./lamaTest --SCAI_CONTEXT=Host >/dev/null
if [ $? -ne 0 ]
then
	echo "ERROR in lama_test"
	error_count=$(($error_count + $?))
fi

#Running lama storage tests
echo "Running serial lama storage tests"
./storage/lamaStorageTest --SCAI_CONTEXT=Host >/dev/null
if [ $? -ne 0 ]
then
    echo "ERROR in lamaStorageTest"
    error_count=$(($error_count + $?))
fi

#Running lama matrix tests
echo "Running serial lama matrix tests"
./matrix/lamaMatrixTest --SCAI_CONTEXT=Host >/dev/null
if [ $? -ne 0 ]
then
    echo "ERROR in lamaMatrixTest"
    error_count=$(($error_count + $?))
fi

if [ -d distributed ];
then
    # Running parallel tests serial and with two processes
    echo "Running distributed tests serial"
    ./distributed/lamaDistTest --SCAI_CONTEXT=Host >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lama_dist_test"
        error_count=$(($error_count + $?))
    fi

    for i in 2 3 4;
    do
        echo "Running distributed tests with $i processes"
        mpirun -np $i ./distributed/lamaDistTest --SCAI_CONTEXT=Host >/dev/null
        if [ $? -ne 0 ]
        then
            echo "ERROR in lamaDistTest with $i processes"
            error_count=$(($error_count + $?))
        fi
    done
fi
    
    
if [ -d cuda ];
then
    # Running lama tests
    echo "Running serial lama tests"
    ./lamaTest --SCAI_CONTEXT=CUDA >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lama_test"
        error_count=$(($error_count + $?))
    fi

    #Running lama storage tests
    echo "Running serial lama storage tests"
    ./storage/lamaStorageTest --SCAI_CONTEXT=CUDA >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lamaStorageTest"
        error_count=$(($error_count + $?))
    fi

    #Running lama matrix tests
    echo "Running serial lama matrix tests"
    ./matrix/lamaMatrixTest --SCAI_CONTEXT=CUDA >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lamaMatrixTest"
        error_count=$(($error_count + $?))
    fi

    #Running dedicated cuda tests
    echo "Running dedicated cuda tests"
    ./cuda/lamaCUDATest >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lamaCUDATest"
        error_count=$(($error_count + $?))
    fi

    // TODO: need distributed cuda tests?
fi

do_coverage $dirname ../.. "@CMAKE_SOURCE_DIR@"

if [ $? == 1 ];
then
    exit 1
fi

zip -qr ../lama_coverage.zip *
