#
#  @file code_coverage.sh
# 
#  @license
#  Copyright (c) 2009-2013
#  Fraunhofer Institute for Algorithms and Scientific Computing SCAI
#  for Fraunhofer-Gesellschaft
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#  @endlicense
# 
#  @brief This file is a shellscript, which contains all necessary steps to 
#         measure code coverage of LAMA.
#  @author: Alexander BÃ¼chel, Lauretta Schubert
#  @date 15.08.2012
#  @since 1.0.0
#

#!/bin/bash

. ../../scai_code_coverage_functions.sh

dirname=$(create_dir)
echo "Create coverage directory: ${dirname}"

prepare_coverage $dirname ../..

export SCAI_LOG=TRACE
export SCAI_TRACE=time
	
# Running lama tests
echo "Running serial lama tests"
./lamaTest --SCAI_CONTEXT=Host >/dev/null
if [ $? -ne 0 ]
then
	echo "ERROR in lama_test"
	error_count=$(($error_count + $?))
fi

#Running lama storage tests
echo "Running serial lama storage tests"
./storage/lamaStorageTest --SCAI_CONTEXT=Host >/dev/null
if [ $? -ne 0 ]
then
    echo "ERROR in lamaStorageTest"
    error_count=$(($error_count + $?))
fi

#Running lama matrix tests
echo "Running serial lama matrix tests"
./matrix/lamaMatrixTest --SCAI_CONTEXT=Host >/dev/null
if [ $? -ne 0 ]
then
    echo "ERROR in lamaMatrixTest"
    error_count=$(($error_count + $?))
fi

if [ -d distributed ];
then
    # Running parallel tests serial and with two processes
    echo "Running distributed tests serial"
    ./distributed/lamaDistTest --SCAI_CONTEXT=Host >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lama_dist_test"
        error_count=$(($error_count + $?))
    fi

    for i in 2 3 4;
    do
        echo "Running distributed tests with $i processes"
        mpirun -np $i ./distributed/lamaDistTest --SCAI_CONTEXT=Host >/dev/null
        if [ $? -ne 0 ]
        then
            echo "ERROR in lamaDistTest with $i processes"
            error_count=$(($error_count + $?))
        fi
    done
fi
    
    
if [ -d cuda ];
then
    # Running lama tests
    echo "Running serial lama tests"
    ./lamaTest --SCAI_CONTEXT=CUDA >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lama_test"
        error_count=$(($error_count + $?))
    fi

    #Running lama storage tests
    echo "Running serial lama storage tests"
    ./storage/lamaStorageTest --SCAI_CONTEXT=CUDA >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lamaStorageTest"
        error_count=$(($error_count + $?))
    fi

    #Running lama matrix tests
    echo "Running serial lama matrix tests"
    ./matrix/lamaMatrixTest --SCAI_CONTEXT=CUDA >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lamaMatrixTest"
        error_count=$(($error_count + $?))
    fi

    #Running dedicated cuda tests
    echo "Running dedicated cuda tests"
    ./cuda/lamaCUDATest >/dev/null
    if [ $? -ne 0 ]
    then
        echo "ERROR in lamaCUDATest"
        error_count=$(($error_count + $?))
    fi

    // TODO: need distributed cuda tests?
fi

do_coverage "@CMAKE_SOURCE_DIR@/*"

if [ $? == 1 ];
then
    exit 1
fi

zip -r ../lama_coverage.zip *
