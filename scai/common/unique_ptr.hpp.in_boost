/**
 * @file common/unique_ptr.hpp
 *
 * @license
 * Copyright (c) 2009-2016
 * Fraunhofer Institute for Algorithms and Scientific Computing SCAI
 * for Fraunhofer-Gesellschaft
 *
 * This file is part of the SCAI framework LAMA.
 *
 * LAMA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * LAMA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with LAMA. If not, see <http://www.gnu.org/licenses/>.
 *
 * Other Usage
 * Alternatively, this file may be used in accordance with the terms and
 * conditions contained in a signed written agreement between you and
 * Fraunhofer SCAI. Please contact our distributor via info[at]scapos.com.
 * @endlicense
 *
 * @brief Embedding unique_ptr in common namespace.
 * @author Thomas Brandes
 * @date 15.07.2015
 */

#pragma once

#include <scai/common/boost_check.hpp>

// Boost 1.57 and higher provides same unique_ptr as C++
// but unfortunately not the previous versions
// #include <boost/interprocess/smart_ptr/unique_ptr.hpp>

#include <boost/scoped_array.hpp>
#include <memory>

namespace scai
{

namespace common
{
    using boost::scoped_array;

    /** Smart pointer where only one single reference exists. */

    template<typename T>
    class unique_ptr : public std::auto_ptr<T>
    {
    public:
        unique_ptr( T* ptr ) : std::auto_ptr<T>( ptr ) 
        {
        }
        unique_ptr() : std::auto_ptr<T>() 
        {
        }
    };

} /* end namespace common */

} /* end namespace scai */
