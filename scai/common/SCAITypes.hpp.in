/**
 * @file SCAITypes.hpp
 *
 * @license
 * Copyright (c) 2009-2018
 * Fraunhofer Institute for Algorithms and Scientific Computing SCAI
 * for Fraunhofer-Gesellschaft
 *
 * This file is part of the SCAI framework LAMA.
 *
 * LAMA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * LAMA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with LAMA. If not, see <http://www.gnu.org/licenses/>.
 * @endlicense
 *
 * @brief Define one index type and all numeric and array types for which SCAI template classes will be instantiated
 * @author Thomas Brandes, Jiri Kraus
 * @date 23.02.2011
 */
#pragma once

// no support of Complex if this file is not included

#if ${SCAI_USE_COMPLEX}
#include <scai/common/Complex.hpp>
#endif

#include <scai/common/config.hpp>

#include <scai/common/mepr/TypeList.hpp>
#include <scai/common/mepr/TypeListUtils.hpp>

// std
#include <cstring>
#include <limits>
#include <stdint.h>

/** Common namespace for all projects of Fraunhofer SCAI. */

/** LAMA uses for all its classes and routines an own namespace.
 *
 *  Applications using LAMA must either put \c scai::lama:: before the used
 *  classes and routines or utilize the using directive of C++.
 *
 *  \code
 *     scai::lama::DenseVector<float> V;
 *     using namespace scai::lama;
 *     DenseVector<float> V;
 *  \endcode
 */
namespace scai
{
/** Data type that is used for indexing in LAMA.
 *
 *  Currently, it is still necessary that it is a signed data type.
 *  int is the good choice, might be long int or long long int for
 *  future versions that deal with very large matrices even on on processor.
 */
typedef ${SCAI_INDEX_TYPE} IndexType;

/** Definition for a constant value that indicates a non-available index.
 */

COMMON_DLL_IMPORTEXPORT extern const IndexType invalidIndex;

/** Data type that is used for numbering of partitions.
 *
 *  ToDo: currently PartitionId must be same as IndexType as otherwise
 *  there will be link errors for some not instantiated routines.
 */
typedef IndexType PartitionId;

/** Definition for a constant value that indicates a non-available partition.
 */
COMMON_DLL_IMPORTEXPORT extern const PartitionId invalidPartition;

/** Data type long double to have it as one word. Otherwise certain macros
 *  might fail to work correctly.
 */
typedef long double LongDouble;

}

/*
 * Lists of all supported numeric types
 */

#ifdef SCAI_COMPLEX_SUPPORTED

#define SCAI_NUMERIC_TYPES float, double, LongDouble, ComplexFloat, ComplexDouble, ComplexLongDouble

#else

#define SCAI_NUMERIC_TYPES float, double, LongDouble

#endif

/**
 *  List of all supported types (e.g. for communicator methods)
 *  For all these types TypeTraits<type> must be defined
 *  Each possible type that can be used for IndexType must appear in this list
 */

#define SCAI_ALL_TYPES int, unsigned int, long, unsigned long, char, SCAI_NUMERIC_TYPES

/*
 * Lists of all used numeric types for which matrices, storages might be created
 */

/*
 * Supported numeric types on different devices
 */

#define SCAI_NUMERIC_TYPES_HOST     ${CMAKE_NUMERIC_TYPES_HOST}
#define SCAI_NUMERIC_TYPES_EXT_HOST ${CMAKE_NUMERIC_TYPES_EXT_HOST}
#define SCAI_NUMERIC_TYPES_CUDA     ${CMAKE_NUMERIC_TYPES_CUDA}

/*
 * Supported array types on different devices
 *
 * General rule: SCAI_ARRAY_TYPES_XXX is IndexType, SCAI_NUMERIC_TYPES_XXX
 */

#define SCAI_ARRAY_TYPES_HOST     ${CMAKE_ARRAY_TYPES_HOST}
#define SCAI_ARRAY_TYPES_EXT_HOST ${CMAKE_ARRAY_TYPES_EXT_HOST}
#define SCAI_ARRAY_TYPES_CUDA     ${CMAKE_ARRAY_TYPES_CUDA}

/**
 * Supported real (non-complex) types
 */
#define SCAI_REAL_TYPES_HOST      ${CMAKE_REAL_TYPES_HOST}

/**
 * Supported types for fft, only if ValueType and Complex<RealType<ValueType>> are both in NUMERIC_TYPES
 */
#define SCAI_FFT_TYPES_HOST       ${CMAKE_FFT_TYPES_HOST}

/*
 * List creation
 *
 * General rule: SCAI_XXX_TYPES_YYY_LIST SCAI_TYPELIST( SCAI_XXX_TYPES_YYY )
 */

#define SCAI_NUMERIC_TYPES_HOST_LIST       SCAI_TYPELIST( SCAI_NUMERIC_TYPES_HOST )
#define SCAI_NUMERIC_TYPES_EXT_HOST_LIST   SCAI_TYPELIST( SCAI_NUMERIC_TYPES_EXT_HOST )
#define SCAI_NUMERIC_TYPES_CUDA_LIST       SCAI_TYPELIST( SCAI_NUMERIC_TYPES_CUDA )

#define SCAI_ARRAY_TYPES_HOST_LIST         SCAI_TYPELIST( SCAI_ARRAY_TYPES_HOST )
#define SCAI_ARRAY_TYPES_EXT_HOST_LIST     SCAI_TYPELIST( SCAI_ARRAY_TYPES_EXT_HOST )
#define SCAI_ARRAY_TYPES_CUDA_LIST         SCAI_TYPELIST( SCAI_ARRAY_TYPES_CUDA )

#define SCAI_ALL_TYPES_LIST                SCAI_TYPELIST( SCAI_ALL_TYPES )

namespace scai
{

/** Representation type for Scalar must be the numeric type with highest precision */

typedef ${CMAKE_SCALAR_REP_TYPE} ScalarRepType;

/** Default real type taken for example and test programs, usually double, but can also be float 
    or LongDouble if double is not in NUMERIC types list  */

typedef scai::common::mepr::TypeListUtilsVLL<double, SCAI_NUMERIC_TYPES_HOST_LIST, SCAI_NUMERIC_TYPES_HOST_LIST>::ValueType DefaultReal;
 
}
