stages:
  # Provides a basic sanity check for a small portion of the LAMA library.
  # Is quick to build and run, and it might capture e.g. certain differences
  # in environment
  - basic build test
  # Build, test and install the entire LAMA library. Most jobs run in this stage
  - build test install
  
variables:
  BUILD_THREADS: 8
  BUILD_DIR: $CI_PROJECT_DIR/build
  INSTALL_DIR: $CI_PROJECT_DIR/installed
  OMP_NUM_THREADS: 8

  # Default configuration for LAMA build
  LAMA_BUILD_TYPE: Release
  USE_OPENMP: 1
  USE_CUDA: 0
  USE_JAVA: 0
  USE_MPI: 0
  USE_METIS: 0
  USE_BOOST_TEST: 1

  # For Boost versions that are recent enough, make the output colored
  BOOST_TEST_COLOR_OUTPUT: 1

.before_every_job: &before_every_job
    |
      echo -e "Build directory: $BUILD_DIR"
      echo -e "Install directory: $INSTALL_DIR"

.build test install template: &build_test_install_template
  script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - env
    - set -x
    # Note: eval is necessary to expand EXTRA_CMAKE_OPTS correctly
    - >
        eval cmake ../scai
        -DUSE_OPENMP=$USE_OPENMP
        -DUSE_CUDA=$USE_CUDA
        -DUSE_JAVA=$USE_JAVA
        -DUSE_MPI=$USE_MPI
        -DUSE_METIS=$USE_METIS
        -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR
        -DUSE_BOOST_TEST=$USE_BOOST_TEST
        -DCMAKE_BUILD_TYPE=$LAMA_BUILD_TYPE
        "$EXTRA_CMAKE_OPTS"
    - make -j$BUILD_THREADS
    - make -j$BUILD_THREADS examples tests
    - echo $LD_LIBRARY_PATH
    - ldd common/test/commonTest
    - ./common/test/commonTest
    - make test
    - eval python run_tests.py --output_dir $BUILD_DIR/testoutput --temp_dir tmp "$RUN_TESTS_ARGS"
    - make install > $CI_PROJECT_DIR/make_install_output.txt
  after_script:
    - mv $BUILD_DIR/testoutput $CI_PROJECT_DIR/testoutput
    - cp $CI_PROJECT_DIR/testoutput/report.html $CI_PROJECT_DIR/test_report.html
  artifacts:
    paths:
    # Note: These paths should be relative, otherwise weird things may happen!
    - testoutput/
    - test_report.html
    - make_install_output.txt
    expire_in: 1 week
    when: always
  # By default, artifacts from the previous stage are passed through. We don't want this!
  dependencies: []

###############################################################
# CONFIGURATIONS INTENDED TO RUN ON EVERY COMMIT TO ANY BRANCH
###############################################################

common basic build serial gcc 7.3.0 (debug):
  # This is the most basic build configuration.
  # It is only intended as a quick and basic sanity check,
  # so that using compute resources for running the full
  # configurations can be avoided if this one fails
  <<: *build_test_install_template
  stage: basic build test
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Debug
    USE_OPENMP: 0
    USE_CUDA: 0
    OMP_NUM_THREADS: 1
    # Note the SCAI_MODULES definition
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1 -DSCAI_MODULES=common
    RUN_TESTS_ARGS: --tests commonTest
  tags:
    - draco

serial gcc 7.3.0 (debug):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Debug
    USE_CUDA: 0
    OMP_NUM_THREADS: 1
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1
  tags:
    - draco

mpi intel 2019.01 (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load intel/2019.01
    - module load CMake/3.13.3-GCCcore-8.2.0 
    - module load Python/2.7.15-GCCcore-8.2.0
    - module load Boost/1.69.0-intel-2019.01
    - export FI_PROVIDER=tcp
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    USE_MPI: 1
    OMP_NUM_THREADS: 1
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1 -DCMAKE_CXX_COMPILER=icpc
    RUN_TESTS_ARGS: --intel --mpi --np 1 2 3 5
  tags:
    - draco

mpi gcc 7.3.0 (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - module load OpenMPI/3.1.1-GCC-7.3.0-2.30
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    USE_MPI: 1
    OMP_NUM_THREADS: 1
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1
    RUN_TESTS_ARGS: --mpi --np 1 2 3 5
  tags:
    - draco

parallel gcc 8.2.0 (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.13.3-GCCcore-8.2.0 Python/2.7.15-GCCcore-8.2.0
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    USE_MPI: 0
    OMP_NUM_THREADS: 4
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1
  tags:
    - draco

int64 (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - module load OpenMPI/3.1.1-GCC-7.3.0-2.30
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    USE_MPI: 1
    OMP_NUM_THREADS: 1
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1 -DSCAI_INDEX_TYPE="unsigned int"
    RUN_TESTS_ARGS: --mpi --np 1 4
  tags:
    - draco

double (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - module load OpenMPI/3.1.1-GCC-7.3.0-2.30
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    USE_MPI: 1
    OMP_NUM_THREADS: 1
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1 -DSCAI_HOST_TYPES_LIST="double"
    RUN_TESTS_ARGS: --mpi --np 1 4
  tags:
    - draco

##################################################################
# CONFIGURATIONS INTENDED TO RUN ON EVERY COMMIT TO MASTER/DEVELOP
##################################################################

serial gcc 4.9.1 (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module load tools/cmake/3.5.2 tools/python/2.7.14
    - module unload gcc
    - module load gcc/4.9.1
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    OMP_NUM_THREADS: 1
    # It seems to be necessary to specifically specify the Boost installation
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1
  tags:
    - draco
  only:
    - master
    - develop

parallel gcc 7.3.0 (release):
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Release
    USE_CUDA: 0
    OMP_NUM_THREADS: 4
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1
  tags:
    - draco
  only:
    - master
    - develop

sanitized parallel gcc 7.3.0:
  <<: *build_test_install_template
  stage: build test install
  before_script:
    - *before_every_job
    - module purge
    - module load CMake/3.11.4-GCCcore-7.3.0 Python/2.7.15-GCCcore-7.3.0-bare
    - export BOOST_ROOT=/home/brandes/local/boost_1_65_1_gcc_7_3_0
    - export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"
  variables:
    LAMA_BUILD_TYPE: Debug
    USE_CUDA: 0
    OMP_NUM_THREADS: 1
    EXTRA_CMAKE_OPTS: -DBoost_NO_BOOST_CMAKE=1 -DBoost_NO_SYSTEM_PATHS=1
    UBSAN_OPTIONS: print_stacktrace=1
    # We currently have some tests which try to allocate too much memory,
    # expecting to receive an exception. ASAN will by default not allow returning
    # null from the allocator, so we have to instruct it to ignore it.
    ASAN_OPTIONS: allocator_may_return_null=true
    EXTRA_CMAKE_OPTS: >
        -DBoost_NO_BOOST_CMAKE=1
        -DADDITIONAL_CXX_FLAGS="-fsanitize=undefined -fno-sanitize-recover=all -fno-omit-frame-pointer"
        -DADDITIONAL_LINKER_FLAGS="-fsanitize=undefined -fno-sanitize-recover=all"
        -DSCAI_BLAS_LIBRARY=INTERNALBLAS
        -DUSE_FFTW=0
  tags:
    - draco
